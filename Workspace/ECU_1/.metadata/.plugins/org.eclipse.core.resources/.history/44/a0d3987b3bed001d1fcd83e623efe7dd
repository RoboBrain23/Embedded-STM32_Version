/********************************************************************************************/
/* Author      : Ibrahim Diab                                                               */
/* File Name   : BatteryIndicator_program.c                                                 */
/* Description : Functions Implementation for Battery Indicator (HAL Layer)                 */
/********************************************************************************************/

/* Library includes */
#include "Std_Types.h"
#include "Common_Macros.h"

/* MCU constant parameters includes */
#include "STM32F103C6.h"

/* Peripherals includes */
#include "RCC_interface.h"
#include "DIO_interface.h"
#include "ADC_interface.h"

/* Module files includes */
#include "BatteryIndicator_interface.h"
#include "BatteryIndicator_private.h"
#include "BatteryIndicator_config.h"


/* This function initializes the battery indicator module */
void BattInd_init()
{
        // check if BattInd_channel_ID is within valid range for GPIOA
    if(BattInd_channel_ID <= ADC_CHANNEL_7 && BattInd_channel_ID >= ADC_CHANNEL_0)
    {
        // enable clock for GPIOA
        RCC_enableClk (RCC_APB2, RCC_GPIOA);
        
        // set the direction of the corresponding GPIO pin to input analog mode
        DIO_setPinDirection(DIO_GPIOA, BattInd_channel_ID, INPUT_ANALOG);
    }
    
    // check if BattInd_channel_ID is within valid range for GPIOB
    else if(BattInd_channel_ID <= ADC_CHANNEL_9)
    {
        // enable clock for GPIOB
        RCC_enableClk (RCC_APB2, RCC_GPIOB);

        // set the direction of the corresponding GPIO pin to input analog mode
        DIO_setPinDirection(DIO_GPIOB, BattInd_channel_ID, INPUT_ANALOG);
    }
    
    // check if BattInd_channel_ID is within valid range for GPIOC
    else if(BattInd_channel_ID <= ADC_CHANNEL_15)
    {
        // enable clock for GPIOC
        RCC_enableClk (RCC_APB2, RCC_GPIOC);

        // set the direction of the corresponding GPIO pin to input analog mode
        DIO_setPinDirection(DIO_GPIOC, BattInd_channel_ID, INPUT_ANALOG);
    }
    
    // if BattInd_channel_ID is out of range, do nothing or return error
    else 
    {
        // do nothing
    }
    
    // enable clock for ADC1
    RCC_enableClk (RCC_APB2, RCC_ADC1);
    
    // initialize ADC1
    ADC_InitTypeDef ADC_Config={
    		ADC_MODE_INDEPENDENT,DISABLE,DISABLE,ADC_EXTERNALTRIGCONV_NONE,ADC_DATA_ALIGN_RIGHT,1

    };
   ADC_Init(ADC1,&ADC_Config);

    // set the channel for regular group conversion
    //ADC_setChannel(ADC1, BattInd_channel_ID, ADC_Group_Regular);

    // set the conversion sequence
  //ADC_regulargroupInit(ADC1, Batt_convertion_NUM);

    // set the ADC to single conversion mode
  //  Adc_setMode(ADC1, ADC_MODE_SINGLE);
}
 
 
#if BATTERY_DISCHARGE_CURVE == NON_LINEAR

/* Get the battery capacity level based on lookup table */
uint8 BattInd_getBatteryCapacityLevel()
{
    // Read battery voltage from ADC
    uint16 batteryLevel = ADC_GetValue(ADC1,BattInd_channel_ID,ADC_SAMPLETIME_28CYCLES5);
    		//ADC_typeRead(ADC1 , BattInd_channel_ID);
    
    // Convert ADC value to actual voltage
    batteryLevel = ((((batteryLevel / ADC_MAX_VALUE) * ADC_REF_VOLT_VALUE) * VOLTAGE_DIVIDER_RATIO));
    
    // Check which level the battery voltage falls into and return it
    for(uint8 level = 9; level > 0; level--)
    {
        if(batteryLevel >= lookup_Table[level])
            return (level+1);
    }
    
    // If battery voltage is below the lowest level, return 0
    return 0;
}

#elif BATTERY_DISCHARGE_CURVE == LINEAR 

/*Get the battery capacity percentage based on linear curve */
uint8 BattInd_getBatteryCapacityPercentage()
{
    // Read battery voltage from ADC
    uint16 batteryPercentage = ADC_typeRead(ADC1 , BattInd_channel_ID);
    
    // Convert ADC value to actual voltage
    batteryPercentage = ((((batteryPercentage / ADC_MAX_VALUE) * ADC_REF_VOLT_VALUE) * VOLTAGE_DIVIDER_RATIO));
    
    // Calculate battery capacity percentage based on voltage range
    batteryPercentage = ((batteryPercentage - VOLTAGE_FULLY_DISCHARGED) / (VOLTAGE_FULLY_CHARGED - VOLTAGE_FULLY_DISCHARGED));
    
    // Return the battery capacity percentage
    return batteryPercentage;
}

#endif
