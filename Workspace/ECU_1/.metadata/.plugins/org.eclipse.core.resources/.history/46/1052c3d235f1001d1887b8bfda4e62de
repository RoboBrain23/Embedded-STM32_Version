/********************************************************************************************/
/* Author      : Ibrahim Diab                                                               */
/* File Name   : Oximeter.c			                         	                      	    */
/* Description : Functions Implementation for Max30102 Oximeter (HAL Layer)                 */
/********************************************************************************************/

/* Library includes */
#include "Std_Types.h"
#include "Common_Macros.h"

/* MCU constant parameters includes */
#include "STM32F103C6.h"

/* Peripherals includes */
#include "RCC_interface.h"
#include "DIO_interface.h"
#include "AFIO_interface.h"
#include "EXTI_interface.h"
#include "NVIC_interface.h"
#include "I2C_interface.h"

/* Module files includes */
#include "Oximeter_interface.h"
#include "Oximeter_private.h"
#include "Oximeter_config.h"

volatile static uint8 InterruptStatus[NUM_OF_INTERRUPT_STATUS];

volatile static Mode_t current_mode;
volatile static ADC_Resolution_t current_ADC_reslolution;
volatile static

void Oximeter_init();

void Oximeter_setInterruptState(Interrupt_Type_t interrupt_ID,State_t state)
{
	 uint8 RegTemp =0;

	 if(interrupt_ID == Interrupt_DIE_TEMP_RDY_EN)
	 {
		readRegister( INTR_ENABLE_2, &RegTemp, 1);

		if(state == Enable)
			SET_BIT(RegTemp,interrupt_ID);
		else
			CLR_BIT(RegTemp,interrupt_ID);

		writeRegister( INTR_ENABLE_2, &RegTemp, 1);
	 }
	 else
	 {
		readRegister( INTR_ENABLE_1, &RegTemp, 1);

		if(state == Enable)
			SET_BIT(RegTemp,interrupt_ID);
		else
			CLR_BIT(RegTemp,interrupt_ID);

		writeRegister( INTR_ENABLE_1, &RegTemp, 1);
	 }
}

void Oximeter_getInterruptStatus()
{
	uint8 RegTemp=0;

	readRegister( INTR_ENABLE_2, &RegTemp, 1);

	InterruptStatus[TEMPERATURE_READY_FLAG_INDEX]=GET_BIT(RegTemp,1);

	RegTemp=0;

	readRegister( INTR_ENABLE_1, &RegTemp, 1);

	InterruptStatus[FIFO_ALMOST_FULL_FLAG_INDEX]=  GET_BIT(RegTemp,7);
	InterruptStatus[FIFO_NEW_DATA_READY_INDEX]=	   GET_BIT(RegTemp,6);
	InterruptStatus[AMBIENT_LIGHT_OVERFLOW_INDEX]= GET_BIT(RegTemp,5);
	InterruptStatus[POWER_READY_FLAG_INDEX]=       GET_BIT(RegTemp,0);
}


void Oximeter_setFIFOAlmostFullValue(uint8 UnreadDataSamples)
{
	if(UnreadDataSamples <= 32 && UnreadDataSamples >=17 )
	{
		uint8 RegTemp=0;

		readRegister( FIFO_CONFIG, &RegTemp, 1);
		MOD_4BIT(RegTemp, 0, (32-UnreadDataSamples));
		writeRegister( FIFO_CONFIG, &RegTemp, 1);
	}
}

void Oximeter_setSampleAverging(Sample_Averaging_t sampleAveraging)
{
	uint8 RegTemp=0;

	readRegister( FIFO_CONFIG, &RegTemp, 1);
	MOD_3BIT(RegTemp, 5, sampleAveraging);
	writeRegister( FIFO_CONFIG, &RegTemp, 1);
}

void Oximeter_shutdowm(State_t state)
{
	uint8 RegTemp=0;

	readRegister( MODE_CONFIG, &RegTemp, 1);

	if(state == Disable)
		CLR_BIT(RegTemp,7);
	else
		SET_BIT(RegTemp,7);

	writeRegister( MODE_CONFIG, &RegTemp, 1);
}

void Oximeter_reset()
{
	uint8 RegTemp=0;

	readRegister( MODE_CONFIG, &RegTemp, 1);
	SET_BIT(RegTemp,6);
	writeRegister( MODE_CONFIG, &RegTemp, 1);
}

void Oximeter_setMode(Mode_t Mode)
{
	uint8 RegTemp=0;

	readRegister( MODE_CONFIG, &RegTemp, 1);
	MOD_3BIT(RegTemp, 0, Mode);
	writeRegister( MODE_CONFIG, &RegTemp, 1);
}

void Oximeter_setSPO2ADCRange(SPO2_ADC_Range_t SPO2_ADC_Range)
{
	uint8 RegTemp=0;

	readRegister( SPO2_CONFIG, &RegTemp, 1);
	MOD_2BIT(RegTemp, 5, SPO2_ADC_Range);
	writeRegister( SPO2_CONFIG, &RegTemp, 1);
}

void Oximeter_setSPO2SampleRate(SPO2_Sample_Rate_t SPO2_Sample_Rate)
{
	uint8 RegTemp=0;

	readRegister( SPO2_CONFIG, &RegTemp, 1);
	MOD_3BIT(RegTemp, 2, SPO2_Sample_Rate);
	writeRegister( SPO2_CONFIG, &RegTemp, 1);
}

void Oximeter_setADCResolution(ADC_Resolution_t ADC_Resolution)
{
	uint8 RegTemp=0;

	readRegister( SPO2_CONFIG, &RegTemp, 1);
	MOD_2BIT(RegTemp, 5, ADC_Resolution);
	writeRegister( SPO2_CONFIG, &RegTemp, 1);
}



// This function writes multiple bytes to the Oximeter.
void writeRegister(uint8 registerAddress, uint8 * buffer, uint8 dataLength)
{
	// Define a buffer to store the memory address and data to be written.
	uint8 bufferToSend[I2C_MAX_BUFFER_SIZE]={0};

	// Store the memory address in the buffer.
	bufferToSend[0]=(uint8)(registerAddress);

	// Store the data to be written in the buffer.
	for(uint8 i=1;i<(dataLength+1);i++)
		bufferToSend[i]=buffer[i-1];

	// Send the buffer data to the EEPROM via I2C protocol with a start condition and stop condition.
	I2C_sendData(I2C_USED ,MAX30102_ADDRESS, bufferToSend ,  (dataLength+1), START , WITH_STOP);
}


// This function reads Data from the Oximeter.
void readRegister(uint8 registerAddress, uint8 * buffer, uint8 dataLength)
{
    uint8 bufferToSend[2];

    // Store the register address to read from in the buffer
    bufferToSend[0] = (uint8)registerAddress;

    // Send the memory address to the EEPROM, followed by a repeated start signal
    // without sending a stop signal to keep the bus busy
    I2C_sendData(I2C_USED, MAX30102_ADDRESS, bufferToSend, 2, START, WITHOUT_STOP);

    // Read the specified number of bytes from the EEPROM into the buffer
    I2C_receiveData(I2C_USED, MAX30102_ADDRESS, buffer, dataLength, REPEATED_START, WITH_STOP);
}

float32 Oximeter_readTemperatureSynq()
{
	uint8 ptrValue=1, tempFraction =0;
	int8 tempInteger=0;
	float32 temperature =0;

	writeRegister( TEMP_CONFIG, &ptrValue, 1);
	readRegister( FIFO_WR_PTR, &ptrValue, 1);

	while(GET_BIT(ptrValue,0));

	readRegister( TEMP_INTR, (uint8 *)&tempInteger, 1);
	readRegister( TEMP_FRAC, &tempFraction, 1);

	tempFraction &= 0xF;
	temperature = tempInteger + (tempFraction * .0625);

	return temperature;
}

float32 Oximeter_readTemperatureAsynq()
{

}


void Oximeter_setFIFOReadPtr(uint8 ptrValue)
{
	if(ptrValue <=31)
		writeRegister( FIFO_RD_PTR, &ptrValue, 1);
}

uint8 Oximeter_getFIFOReadPtr()
{
	uint8 ptrValue=0;
	readRegister( FIFO_RD_PTR, &ptrValue, 1);
	return ptrValue;
}

void Oximeter_setFIFOWritePtr(uint8 ptrValue)
{
	if(ptrValue <=31)
		writeRegister( FIFO_WR_PTR, &ptrValue, 1);
}

uint8 Oximeter_getFIFOWritePtr()
{
	uint8 ptrValue=0;
	readRegister( FIFO_WR_PTR, &ptrValue, 1);
	return ptrValue;
}

uint8 Oximeter_getFIFOOverflowCounter()
{
	uint8 ptrValue=0;
	readRegister( OVF_COUNTER, &ptrValue, 1);
	return ptrValue;
}

void Oximeter_setRollOnFullState(State_t state)
{
	uint8 RegTemp=0;

	readRegister( FIFO_CONFIG, &RegTemp, 1);

	if(state == Disable)
		CLR_BIT(RegTemp,4);
	else
		SET_BIT(RegTemp,4);

	writeRegister( FIFO_CONFIG, &RegTemp, 1);
}

void Oximeter_setRedPulseAmplitude(uint8 value)
{
	writeRegister( LED1_PA, &value, 1);
}

void Oximeter_setIRPulseAmplitude(uint8 value)
{
	writeRegister( LED2_PA, &value, 1);
}

void Oximeter_setSlot(Max30102_slot_t slotNumber, led_State_t ledNumber)
{
	uint8 RegTemp=0;

	switch(slotNumber)
	{

	case  SLOT_1:
		readRegister( MULTI_LED_CTRL1, &RegTemp, 1);
		MOD_3BIT(RegTemp, 0, (0b111 & ledNumber));
		writeRegister( MULTI_LED_CTRL1, &RegTemp, 1);
		break;

	case  SLOT_2:
		readRegister( MULTI_LED_CTRL1, &RegTemp, 1);
		MOD_3BIT(RegTemp, 4, (0b111 & ledNumber));
		writeRegister( MULTI_LED_CTRL1, &RegTemp, 1);
		break;

	case  SLOT_3:
		readRegister( MULTI_LED_CTRL2, &RegTemp, 1);
		MOD_3BIT(RegTemp, 0, (0b111 & ledNumber));
		writeRegister( MULTI_LED_CTRL2, &RegTemp, 1);
		break;

	case  SLOT_4:
		readRegister( MULTI_LED_CTRL2, &RegTemp, 1);
		MOD_3BIT(RegTemp, 4, (0b111 & ledNumber));
		writeRegister( MULTI_LED_CTRL2, &RegTemp, 1);
		break;

	}
}

